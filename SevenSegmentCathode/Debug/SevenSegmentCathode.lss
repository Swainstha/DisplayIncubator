
SevenSegmentCathode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000006c2  00000756  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  00000760  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ec3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000ec3  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000475  00000000  00000000  00001e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000499  00000000  00000000  000022d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000018c  00000000  00000000  0000276c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003b7  00000000  00000000  00002c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  0000301a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  9e:	0c 94 5f 03 	jmp	0x6be	; 0x6be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN3led8led_initEv>:
		break;
		case TA_LOW_LED:
		REGISTER_LED(TA_LOW_PORT, TA_LOW_PIN, state);
		break;
		case INCUBATOR_LED:
		REGISTER_LED(INCUBATOR_PORT, INCUBATOR_PIN, state);
  a6:	24 9a       	sbi	0x04, 4	; 4
  a8:	20 9a       	sbi	0x04, 0	; 4
  aa:	22 9a       	sbi	0x04, 2	; 4
  ac:	21 9a       	sbi	0x04, 1	; 4
  ae:	39 9a       	sbi	0x07, 1	; 7
		break;
		case PHOTOTHERAPY_LED:
		REGISTER_LED(PHOTOTHERAPHY_PORT, PHOTOTHERAPHY_PIN, state);
  b0:	3a 9a       	sbi	0x07, 2	; 7
  b2:	3b 9a       	sbi	0x07, 3	; 7
  b4:	3c 9a       	sbi	0x07, 4	; 7
  b6:	3d 9a       	sbi	0x07, 5	; 7
  b8:	56 9a       	sbi	0x0a, 6	; 10
  ba:	55 9a       	sbi	0x0a, 5	; 10
		break;
		case HUMIDITY_1_LED:
		REGISTER_LED(HUMIDITY_1_PORT, HUMIDITY_1_PIN, state);
  bc:	08 95       	ret

000000be <_Z8spi_initv>:
	// does not work without it. Not sure why.
	//int i = digitsInUse;
	int i = max7219::digits1;
	// Loop until number is 0.
	do {
		max7219::MAX7219_writeData(i--, number % 10);
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	88 62       	ori	r24, 0x28	; 40
  c2:	84 b9       	out	0x04, r24	; 4
  c4:	3b 9a       	sbi	0x07, 3	; 7
  c6:	57 9a       	sbi	0x0a, 7	; 10
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
}

void max7219::MAX7219_displayNumber(volatile long number)
  c8:	8c b5       	in	r24, 0x2c	; 44
  ca:	82 65       	ori	r24, 0x52	; 82
	// does not work without it. Not sure why.
	//int i = digitsInUse;
	int i = max7219::digits1;
	// Loop until number is 0.
	do {
		max7219::MAX7219_writeData(i--, number % 10);
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	08 95       	ret

000000d0 <_Z11spiSendBytec>:
  d0:	8e bd       	out	0x2e, r24	; 46
		max7219::MAX7219_writeData(i + 5, number % 10);
  d2:	0d b4       	in	r0, 0x2d	; 45
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <_Z11spiSendBytec+0x2>
  d8:	08 95       	ret

000000da <_ZN7max721911MAX7219_setEiii>:
  da:	fc 01       	movw	r30, r24
  dc:	71 83       	std	Z+1, r23	; 0x01
  de:	60 83       	st	Z, r22
  e0:	53 83       	std	Z+3, r21	; 0x03
  e2:	42 83       	std	Z+2, r20	; 0x02
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
}

void max7219::MAX7219_displayNumber(volatile long number)
  e4:	35 83       	std	Z+5, r19	; 0x05
  e6:	24 83       	std	Z+4, r18	; 0x04
	//int i = digitsInUse;
	int i = max7219::digits1;
	// Loop until number is 0.
	do {
		max7219::MAX7219_writeData(i--, number % 10);
		max7219::MAX7219_writeData(i + 5, number % 10);
  e8:	08 95       	ret

000000ea <_ZN7max721917MAX7219_writeDataEcc>:
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
		// Actually divide by 10 now.
		number /= 10;
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
  f2:	14 2f       	mov	r17, r20
  f4:	28 81       	ld	r18, Y
  f6:	39 81       	ldd	r19, Y+1	; 0x01
  f8:	21 15       	cp	r18, r1
  fa:	31 05       	cpc	r19, r1
  fc:	21 f0       	breq	.+8      	; 0x106 <_ZN7max721917MAX7219_writeDataEcc+0x1c>
  fe:	21 30       	cpi	r18, 0x01	; 1
 100:	31 05       	cpc	r19, r1
 102:	21 f4       	brne	.+8      	; 0x10c <_ZN7max721917MAX7219_writeDataEcc+0x22>
 104:	02 c0       	rjmp	.+4      	; 0x10a <_ZN7max721917MAX7219_writeDataEcc+0x20>
	// Initialization to 0 required in this case,
	// does not work without it. Not sure why.
	//int i = digitsInUse;
	int i = max7219::digits1;
	// Loop until number is 0.
	do {
 106:	43 98       	cbi	0x08, 3	; 8
 108:	01 c0       	rjmp	.+2      	; 0x10c <_ZN7max721917MAX7219_writeDataEcc+0x22>
 10a:	5f 98       	cbi	0x0b, 7	; 11
 10c:	86 2f       	mov	r24, r22
 10e:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11spiSendBytec>
 112:	81 2f       	mov	r24, r17
 114:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z11spiSendBytec>
 118:	88 81       	ld	r24, Y
	
	// Bear in mind that if you only have three digits, and
	// try to display something like "-256" all that will display
	// will be "256" because it needs an extra fourth digit to
	// display the sign.
	if (negative) {
 11a:	99 81       	ldd	r25, Y+1	; 0x01
 11c:	00 97       	sbiw	r24, 0x00	; 0
		max7219::MAX7219_writeData(i, MAX7219_CHAR_NEGATIVE);
 11e:	19 f0       	breq	.+6      	; 0x126 <_ZN7max721917MAX7219_writeDataEcc+0x3c>
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	21 f4       	brne	.+8      	; 0x12c <_ZN7max721917MAX7219_writeDataEcc+0x42>
 124:	02 c0       	rjmp	.+4      	; 0x12a <_ZN7max721917MAX7219_writeDataEcc+0x40>
 126:	43 9a       	sbi	0x08, 3	; 8
	}
} 
 128:	01 c0       	rjmp	.+2      	; 0x12c <_ZN7max721917MAX7219_writeDataEcc+0x42>
 12a:	5f 9a       	sbi	0x0b, 7	; 11
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	08 95       	ret

00000134 <_ZN7max721912MAX7219_initEv>:
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
 13a:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z8spi_initv>
 13e:	4f ef       	ldi	r20, 0xFF	; 255
 140:	69 e0       	ldi	r22, 0x09	; 9
 142:	ce 01       	movw	r24, r28
 144:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
 148:	47 e0       	ldi	r20, 0x07	; 7
	spi_init();
	// Decode mode to "Font Code-B"
	max7219::MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);

	// Scan limit runs from 0.
	max7219::MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 7); //7 or 8?
 14a:	6b e0       	ldi	r22, 0x0B	; 11
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(MAX7219_MODE_INTENSITY, 3);
 152:	43 e0       	ldi	r20, 0x03	; 3
 154:	6a e0       	ldi	r22, 0x0A	; 10
 156:	ce 01       	movw	r24, r28
 158:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	max7219::MAX7219_writeData(MAX7219_MODE_POWER, ON);
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	6c e0       	ldi	r22, 0x0C	; 12
 160:	ce 01       	movw	r24, r28
 162:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <_ZN7max721920MAX7219_clearDisplayEv>:
	}
	
}

void max7219::MAX7219_clearDisplay()
{
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
 174:	1c 81       	ldd	r17, Y+4	; 0x04
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	18 0f       	add	r17, r24
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
 17a:	4f e0       	ldi	r20, 0x0F	; 15
 17c:	61 2f       	mov	r22, r17
 17e:	ce 01       	movw	r24, r28
 180:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
void max7219::MAX7219_clearDisplay()
{
	//char i = digitsInUse;
	char i = max7219::digits1 + max7219::digits2 ;
	// Loop until 0, but don't run for zero
	do {
 184:	11 50       	subi	r17, 0x01	; 1
 186:	c9 f7       	brne	.-14     	; 0x17a <_ZN7max721920MAX7219_clearDisplayEv+0xe>
		// Set each display in use to blank
		max7219::MAX7219_writeData(i, MAX7219_CHAR_BLANK);
	} while (--i);
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	08 95       	ret

00000190 <_Z9uart_initv>:
#include <avr/io.h>
#include <avr/interrupt.h>

void uart_init() {
	
	UBRR0H=(baud_pre>>8);
 190:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=baud_pre;
 194:	87 e6       	ldi	r24, 0x67	; 103
 196:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0)|(1<<RXCIE0);
 19a:	e1 ec       	ldi	r30, 0xC1	; 193
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 69       	ori	r24, 0x98	; 152
 1a2:	80 83       	st	Z, r24
	UCSR0C |= (1 <<UCSZ00) | (1 << UCSZ01);
 1a4:	e2 ec       	ldi	r30, 0xC2	; 194
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	86 60       	ori	r24, 0x06	; 6
 1ac:	80 83       	st	Z, r24
 1ae:	08 95       	ret

000001b0 <main>:
volatile bool display = false;
led led1;


int main(void)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	2c 97       	sbiw	r28, 0x0c	; 12
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
	sei();
 1c4:	78 94       	sei
	led1.led_init();
 1c6:	8a e0       	ldi	r24, 0x0A	; 10
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN3led8led_initEv>
	uart_init();
 1ce:	0e 94 c8 00 	call	0x190	; 0x190 <_Z9uart_initv>
	
	max7219 max1;
	max7219 max2;
	max1.MAX7219_set(0,4,4);
 1d2:	24 e0       	ldi	r18, 0x04	; 4
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	44 e0       	ldi	r20, 0x04	; 4
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	ce 01       	movw	r24, r28
 1e0:	07 96       	adiw	r24, 0x07	; 7
 1e2:	0e 94 6d 00 	call	0xda	; 0xda <_ZN7max721911MAX7219_setEiii>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	8f e3       	ldi	r24, 0x3F	; 63
 1e8:	9c e9       	ldi	r25, 0x9C	; 156
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x3a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x40>
 1f0:	00 00       	nop
	
	_delay_ms(10);
	max2.MAX7219_set(1, 4, 4);
 1f2:	24 e0       	ldi	r18, 0x04	; 4
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	44 e0       	ldi	r20, 0x04	; 4
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 6d 00 	call	0xda	; 0xda <_ZN7max721911MAX7219_setEiii>
 206:	ef e3       	ldi	r30, 0x3F	; 63
 208:	fc e9       	ldi	r31, 0x9C	; 156
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x5a>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x60>
 210:	00 00       	nop
	_delay_ms(10);
	max1.MAX7219_init();
 212:	ce 01       	movw	r24, r28
 214:	07 96       	adiw	r24, 0x07	; 7
 216:	0e 94 9a 00 	call	0x134	; 0x134 <_ZN7max721912MAX7219_initEv>
 21a:	8f e3       	ldi	r24, 0x3F	; 63
 21c:	9c e9       	ldi	r25, 0x9C	; 156
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x6e>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x74>
 224:	00 00       	nop
	_delay_ms(10);
	max2.MAX7219_init();
 226:	ce 01       	movw	r24, r28
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	0e 94 9a 00 	call	0x134	; 0x134 <_ZN7max721912MAX7219_initEv>
 22e:	ef e3       	ldi	r30, 0x3F	; 63
 230:	fc e9       	ldi	r31, 0x9C	; 156
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x82>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x88>
 238:	00 00       	nop
	_delay_ms(10);
	max1.MAX7219_clearDisplay();
 23a:	ce 01       	movw	r24, r28
 23c:	07 96       	adiw	r24, 0x07	; 7
 23e:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7max721920MAX7219_clearDisplayEv>
 242:	ff ef       	ldi	r31, 0xFF	; 255
 244:	26 e7       	ldi	r18, 0x76	; 118
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	f1 50       	subi	r31, 0x01	; 1
 24a:	20 40       	sbci	r18, 0x00	; 0
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x98>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0xa2>
 252:	00 00       	nop
	_delay_ms(30);
	max2.MAX7219_clearDisplay();
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	0e 94 b6 00 	call	0x16c	; 0x16c <_ZN7max721920MAX7219_clearDisplayEv>
 25c:	9f ef       	ldi	r25, 0xFF	; 255
 25e:	e6 e7       	ldi	r30, 0x76	; 118
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	91 50       	subi	r25, 0x01	; 1
 264:	e0 40       	sbci	r30, 0x00	; 0
 266:	f0 40       	sbci	r31, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0xb2>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0xbc>
 26c:	00 00       	nop
	_delay_ms(30);
	max1.MAX7219_writeData(8, data[0] / 10);
 26e:	00 e0       	ldi	r16, 0x00	; 0
 270:	11 e0       	ldi	r17, 0x01	; 1
 272:	f8 01       	movw	r30, r16
 274:	40 81       	ld	r20, Z
 276:	0f 2e       	mov	r0, r31
 278:	fd ec       	ldi	r31, 0xCD	; 205
 27a:	ff 2e       	mov	r15, r31
 27c:	f0 2d       	mov	r31, r0
 27e:	4f 9d       	mul	r20, r15
 280:	41 2d       	mov	r20, r1
 282:	11 24       	eor	r1, r1
 284:	46 95       	lsr	r20
 286:	46 95       	lsr	r20
 288:	46 95       	lsr	r20
 28a:	68 e0       	ldi	r22, 0x08	; 8
 28c:	ce 01       	movw	r24, r28
 28e:	07 96       	adiw	r24, 0x07	; 7
 290:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	max1.MAX7219_writeData(6, (data[0] % 10) | 0b10000000);
 294:	f8 01       	movw	r30, r16
 296:	80 81       	ld	r24, Z
 298:	8f 9d       	mul	r24, r15
 29a:	91 2d       	mov	r25, r1
 29c:	11 24       	eor	r1, r1
 29e:	96 95       	lsr	r25
 2a0:	96 95       	lsr	r25
 2a2:	96 95       	lsr	r25
 2a4:	99 0f       	add	r25, r25
 2a6:	29 2f       	mov	r18, r25
 2a8:	22 0f       	add	r18, r18
 2aa:	22 0f       	add	r18, r18
 2ac:	92 0f       	add	r25, r18
 2ae:	89 1b       	sub	r24, r25
 2b0:	48 2f       	mov	r20, r24
 2b2:	40 68       	ori	r20, 0x80	; 128
 2b4:	66 e0       	ldi	r22, 0x06	; 6
 2b6:	ce 01       	movw	r24, r28
 2b8:	07 96       	adiw	r24, 0x07	; 7
 2ba:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	
	max1.MAX7219_writeData(2, data[1] / 10);
 2be:	40 91 01 01 	lds	r20, 0x0101
 2c2:	4f 9d       	mul	r20, r15
 2c4:	41 2d       	mov	r20, r1
 2c6:	11 24       	eor	r1, r1
 2c8:	46 95       	lsr	r20
 2ca:	46 95       	lsr	r20
 2cc:	46 95       	lsr	r20
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	ce 01       	movw	r24, r28
 2d2:	07 96       	adiw	r24, 0x07	; 7
 2d4:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	
	max1.MAX7219_writeData(7, data[2] / 10);
 2d8:	02 e0       	ldi	r16, 0x02	; 2
 2da:	11 e0       	ldi	r17, 0x01	; 1
 2dc:	f8 01       	movw	r30, r16
 2de:	40 81       	ld	r20, Z
 2e0:	4f 9d       	mul	r20, r15
 2e2:	41 2d       	mov	r20, r1
 2e4:	11 24       	eor	r1, r1
 2e6:	46 95       	lsr	r20
 2e8:	46 95       	lsr	r20
 2ea:	46 95       	lsr	r20
 2ec:	67 e0       	ldi	r22, 0x07	; 7
 2ee:	ce 01       	movw	r24, r28
 2f0:	07 96       	adiw	r24, 0x07	; 7
 2f2:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	max1.MAX7219_writeData(5, (data[2] % 10) | 0b10000000);
 2f6:	f8 01       	movw	r30, r16
 2f8:	80 81       	ld	r24, Z
 2fa:	8f 9d       	mul	r24, r15
 2fc:	91 2d       	mov	r25, r1
 2fe:	11 24       	eor	r1, r1
 300:	96 95       	lsr	r25
 302:	96 95       	lsr	r25
 304:	96 95       	lsr	r25
 306:	99 0f       	add	r25, r25
 308:	29 2f       	mov	r18, r25
 30a:	22 0f       	add	r18, r18
 30c:	22 0f       	add	r18, r18
 30e:	92 0f       	add	r25, r18
 310:	89 1b       	sub	r24, r25
 312:	48 2f       	mov	r20, r24
 314:	40 68       	ori	r20, 0x80	; 128
 316:	65 e0       	ldi	r22, 0x05	; 5
 318:	ce 01       	movw	r24, r28
 31a:	07 96       	adiw	r24, 0x07	; 7
 31c:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
		
	max1.MAX7219_writeData(1, data[3] / 10);
 320:	40 91 03 01 	lds	r20, 0x0103
 324:	4f 9d       	mul	r20, r15
 326:	41 2d       	mov	r20, r1
 328:	11 24       	eor	r1, r1
 32a:	46 95       	lsr	r20
 32c:	46 95       	lsr	r20
 32e:	46 95       	lsr	r20
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	ce 01       	movw	r24, r28
 334:	07 96       	adiw	r24, 0x07	; 7
 336:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	

	max2.MAX7219_writeData(1, data[4] / 10);
 33a:	04 e0       	ldi	r16, 0x04	; 4
 33c:	11 e0       	ldi	r17, 0x01	; 1
 33e:	f8 01       	movw	r30, r16
 340:	40 81       	ld	r20, Z
 342:	4f 9d       	mul	r20, r15
 344:	41 2d       	mov	r20, r1
 346:	11 24       	eor	r1, r1
 348:	46 95       	lsr	r20
 34a:	46 95       	lsr	r20
 34c:	46 95       	lsr	r20
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	
	max2.MAX7219_writeData(5, data[4] % 10);
 358:	f8 01       	movw	r30, r16
 35a:	80 81       	ld	r24, Z
 35c:	8f 9d       	mul	r24, r15
 35e:	91 2d       	mov	r25, r1
 360:	11 24       	eor	r1, r1
 362:	96 95       	lsr	r25
 364:	96 95       	lsr	r25
 366:	96 95       	lsr	r25
 368:	99 0f       	add	r25, r25
 36a:	29 2f       	mov	r18, r25
 36c:	22 0f       	add	r18, r18
 36e:	22 0f       	add	r18, r18
 370:	92 0f       	add	r25, r18
 372:	48 2f       	mov	r20, r24
 374:	49 1b       	sub	r20, r25
 376:	65 e0       	ldi	r22, 0x05	; 5
 378:	ce 01       	movw	r24, r28
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	
	max2.MAX7219_writeData(4, data[5] / 10);
 380:	05 e0       	ldi	r16, 0x05	; 5
 382:	11 e0       	ldi	r17, 0x01	; 1
 384:	f8 01       	movw	r30, r16
 386:	40 81       	ld	r20, Z
 388:	4f 9d       	mul	r20, r15
 38a:	41 2d       	mov	r20, r1
 38c:	11 24       	eor	r1, r1
 38e:	46 95       	lsr	r20
 390:	46 95       	lsr	r20
 392:	46 95       	lsr	r20
 394:	64 e0       	ldi	r22, 0x04	; 4
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	max2.MAX7219_writeData(6, data[5] % 10);
 39e:	f8 01       	movw	r30, r16
 3a0:	80 81       	ld	r24, Z
 3a2:	8f 9d       	mul	r24, r15
 3a4:	91 2d       	mov	r25, r1
 3a6:	11 24       	eor	r1, r1
 3a8:	96 95       	lsr	r25
 3aa:	96 95       	lsr	r25
 3ac:	96 95       	lsr	r25
 3ae:	99 0f       	add	r25, r25
 3b0:	29 2f       	mov	r18, r25
 3b2:	22 0f       	add	r18, r18
 3b4:	22 0f       	add	r18, r18
 3b6:	92 0f       	add	r25, r18
 3b8:	48 2f       	mov	r20, r24
 3ba:	49 1b       	sub	r20, r25
 3bc:	66 e0       	ldi	r22, 0x06	; 6
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	max2.MAX7219_writeData(8, data[6] / 10);
 3c6:	06 e0       	ldi	r16, 0x06	; 6
 3c8:	11 e0       	ldi	r17, 0x01	; 1
 3ca:	f8 01       	movw	r30, r16
 3cc:	40 81       	ld	r20, Z
 3ce:	4f 9d       	mul	r20, r15
 3d0:	41 2d       	mov	r20, r1
 3d2:	11 24       	eor	r1, r1
 3d4:	46 95       	lsr	r20
 3d6:	46 95       	lsr	r20
 3d8:	46 95       	lsr	r20
 3da:	68 e0       	ldi	r22, 0x08	; 8
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
	max2.MAX7219_writeData(2, data[6] % 10);
 3e4:	f8 01       	movw	r30, r16
 3e6:	80 81       	ld	r24, Z
 3e8:	8f 9d       	mul	r24, r15
 3ea:	91 2d       	mov	r25, r1
 3ec:	11 24       	eor	r1, r1
 3ee:	96 95       	lsr	r25
 3f0:	96 95       	lsr	r25
 3f2:	96 95       	lsr	r25
 3f4:	99 0f       	add	r25, r25
 3f6:	29 2f       	mov	r18, r25
 3f8:	22 0f       	add	r18, r18
 3fa:	22 0f       	add	r18, r18
 3fc:	92 0f       	add	r25, r18
 3fe:	48 2f       	mov	r20, r24
 400:	49 1b       	sub	r20, r25
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			
			//max1.MAX7219_clearDisplay();
			//max2.MAX7219_clearDisplay();
			//_delay_ms(50);
			
			max1.MAX7219_writeData(8, data[0] / 10);
 40c:	0f 2e       	mov	r0, r31
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	8f 2e       	mov	r8, r31
 412:	f1 e0       	ldi	r31, 0x01	; 1
 414:	9f 2e       	mov	r9, r31
 416:	f0 2d       	mov	r31, r0
 418:	0f 2e       	mov	r0, r31
 41a:	fd ec       	ldi	r31, 0xCD	; 205
 41c:	3f 2e       	mov	r3, r31
 41e:	f0 2d       	mov	r31, r0
			max1.MAX7219_writeData(6, (data[0] % 10) | 0b10000000);
			
			max1.MAX7219_writeData(2, data[1] / 10);
 420:	0f 2e       	mov	r0, r31
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	6f 2e       	mov	r6, r31
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	7f 2e       	mov	r7, r31
 42a:	f0 2d       	mov	r31, r0
			
			max1.MAX7219_writeData(7, data[2] / 10);
 42c:	0f 2e       	mov	r0, r31
 42e:	f2 e0       	ldi	r31, 0x02	; 2
 430:	af 2e       	mov	r10, r31
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	bf 2e       	mov	r11, r31
 436:	f0 2d       	mov	r31, r0
			max1.MAX7219_writeData(5, (data[2] % 10) | 0b10000000);
			
			max1.MAX7219_writeData(1, data[3] / 10);
 438:	0f 2e       	mov	r0, r31
 43a:	f3 e0       	ldi	r31, 0x03	; 3
 43c:	4f 2e       	mov	r4, r31
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	5f 2e       	mov	r5, r31
 442:	f0 2d       	mov	r31, r0
			
			max2.MAX7219_writeData(8, 13 / 10);
			
			
			max2.MAX7219_writeData(1, data[4] / 10);
 444:	0f 2e       	mov	r0, r31
 446:	f4 e0       	ldi	r31, 0x04	; 4
 448:	cf 2e       	mov	r12, r31
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	df 2e       	mov	r13, r31
 44e:	f0 2d       	mov	r31, r0
			
			max2.MAX7219_writeData(5, data[4] % 10);
			
			max2.MAX7219_writeData(4, data[5] / 10);
 450:	0f 2e       	mov	r0, r31
 452:	f5 e0       	ldi	r31, 0x05	; 5
 454:	ef 2e       	mov	r14, r31
 456:	f1 e0       	ldi	r31, 0x01	; 1
 458:	ff 2e       	mov	r15, r31
 45a:	f0 2d       	mov	r31, r0
	*/
	
	
	while(1)
	{
		if(received && display) {
 45c:	80 91 0c 01 	lds	r24, 0x010C
 460:	88 23       	and	r24, r24
 462:	21 f0       	breq	.+8      	; 0x46c <main+0x2bc>
 464:	80 91 0b 01 	lds	r24, 0x010B
 468:	81 11       	cpse	r24, r1
 46a:	30 c0       	rjmp	.+96     	; 0x4cc <main+0x31c>
			display = false;
			
			//_delay_ms(2000);					
		}	
					
		if(receivedByte == 255 && received) {
 46c:	80 91 11 01 	lds	r24, 0x0111
 470:	8f 3f       	cpi	r24, 0xFF	; 255
 472:	09 f0       	breq	.+2      	; 0x476 <main+0x2c6>
 474:	f0 c0       	rjmp	.+480    	; 0x656 <main+0x4a6>
 476:	80 91 0c 01 	lds	r24, 0x010C
 47a:	81 11       	cpse	r24, r1
 47c:	f1 c0       	rjmp	.+482    	; 0x660 <main+0x4b0>
 47e:	eb c0       	rjmp	.+470    	; 0x656 <main+0x4a6>
			if(previous_receivedByte == 255) {
				startSaving = true;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	80 93 0d 01 	sts	0x010D, r24
				previous_receivedByte = 0;
 486:	10 92 10 01 	sts	0x0110, r1
				i = 0;
 48a:	10 92 0f 01 	sts	0x010F, r1
 48e:	10 92 0e 01 	sts	0x010E, r1
 492:	06 c0       	rjmp	.+12     	; 0x4a0 <main+0x2f0>
			} else 
			{
				previous_receivedByte = receivedByte;
 494:	80 91 11 01 	lds	r24, 0x0111
 498:	80 93 10 01 	sts	0x0110, r24
				receivedByte= 0;
 49c:	10 92 11 01 	sts	0x0111, r1
			}			
			received = false;
 4a0:	10 92 0c 01 	sts	0x010C, r1
 4a4:	db cf       	rjmp	.-74     	; 0x45c <main+0x2ac>
			
		} else if(startSaving && received) {
 4a6:	80 91 0c 01 	lds	r24, 0x010C
 4aa:	81 11       	cpse	r24, r1
 4ac:	df c0       	rjmp	.+446    	; 0x66c <main+0x4bc>
 4ae:	d6 cf       	rjmp	.-84     	; 0x45c <main+0x2ac>
			received = false;
			i++;
			
			if(i >= 9) {
			
				i = 0;
 4b0:	10 92 0f 01 	sts	0x010F, r1
 4b4:	10 92 0e 01 	sts	0x010E, r1
				receivedByte = previous_receivedByte = 0;
 4b8:	10 92 10 01 	sts	0x0110, r1
 4bc:	10 92 11 01 	sts	0x0111, r1
				startSaving = false;
 4c0:	10 92 0d 01 	sts	0x010D, r1
				display = true;
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 0b 01 	sts	0x010B, r24
 4ca:	c8 cf       	rjmp	.-112    	; 0x45c <main+0x2ac>
			
			//max1.MAX7219_clearDisplay();
			//max2.MAX7219_clearDisplay();
			//_delay_ms(50);
			
			max1.MAX7219_writeData(8, data[0] / 10);
 4cc:	f4 01       	movw	r30, r8
 4ce:	40 81       	ld	r20, Z
 4d0:	43 9d       	mul	r20, r3
 4d2:	41 2d       	mov	r20, r1
 4d4:	11 24       	eor	r1, r1
 4d6:	46 95       	lsr	r20
 4d8:	46 95       	lsr	r20
 4da:	46 95       	lsr	r20
 4dc:	68 e0       	ldi	r22, 0x08	; 8
 4de:	ce 01       	movw	r24, r28
 4e0:	07 96       	adiw	r24, 0x07	; 7
 4e2:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			max1.MAX7219_writeData(6, (data[0] % 10) | 0b10000000);
 4e6:	f4 01       	movw	r30, r8
 4e8:	40 81       	ld	r20, Z
 4ea:	43 9d       	mul	r20, r3
 4ec:	81 2d       	mov	r24, r1
 4ee:	11 24       	eor	r1, r1
 4f0:	86 95       	lsr	r24
 4f2:	86 95       	lsr	r24
 4f4:	86 95       	lsr	r24
 4f6:	88 0f       	add	r24, r24
 4f8:	98 2f       	mov	r25, r24
 4fa:	99 0f       	add	r25, r25
 4fc:	99 0f       	add	r25, r25
 4fe:	89 0f       	add	r24, r25
 500:	48 1b       	sub	r20, r24
 502:	40 68       	ori	r20, 0x80	; 128
 504:	66 e0       	ldi	r22, 0x06	; 6
 506:	ce 01       	movw	r24, r28
 508:	07 96       	adiw	r24, 0x07	; 7
 50a:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			
			max1.MAX7219_writeData(2, data[1] / 10);
 50e:	f3 01       	movw	r30, r6
 510:	40 81       	ld	r20, Z
 512:	43 9d       	mul	r20, r3
 514:	41 2d       	mov	r20, r1
 516:	11 24       	eor	r1, r1
 518:	46 95       	lsr	r20
 51a:	46 95       	lsr	r20
 51c:	46 95       	lsr	r20
 51e:	62 e0       	ldi	r22, 0x02	; 2
 520:	ce 01       	movw	r24, r28
 522:	07 96       	adiw	r24, 0x07	; 7
 524:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			
			max1.MAX7219_writeData(7, data[2] / 10);
 528:	f5 01       	movw	r30, r10
 52a:	40 81       	ld	r20, Z
 52c:	43 9d       	mul	r20, r3
 52e:	41 2d       	mov	r20, r1
 530:	11 24       	eor	r1, r1
 532:	46 95       	lsr	r20
 534:	46 95       	lsr	r20
 536:	46 95       	lsr	r20
 538:	67 e0       	ldi	r22, 0x07	; 7
 53a:	ce 01       	movw	r24, r28
 53c:	07 96       	adiw	r24, 0x07	; 7
 53e:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			max1.MAX7219_writeData(5, (data[2] % 10) | 0b10000000);
 542:	f5 01       	movw	r30, r10
 544:	40 81       	ld	r20, Z
 546:	43 9d       	mul	r20, r3
 548:	81 2d       	mov	r24, r1
 54a:	11 24       	eor	r1, r1
 54c:	86 95       	lsr	r24
 54e:	86 95       	lsr	r24
 550:	86 95       	lsr	r24
 552:	88 0f       	add	r24, r24
 554:	98 2f       	mov	r25, r24
 556:	99 0f       	add	r25, r25
 558:	99 0f       	add	r25, r25
 55a:	89 0f       	add	r24, r25
 55c:	48 1b       	sub	r20, r24
 55e:	40 68       	ori	r20, 0x80	; 128
 560:	65 e0       	ldi	r22, 0x05	; 5
 562:	ce 01       	movw	r24, r28
 564:	07 96       	adiw	r24, 0x07	; 7
 566:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			
			max1.MAX7219_writeData(1, data[3] / 10);
 56a:	f2 01       	movw	r30, r4
 56c:	40 81       	ld	r20, Z
 56e:	43 9d       	mul	r20, r3
 570:	41 2d       	mov	r20, r1
 572:	11 24       	eor	r1, r1
 574:	46 95       	lsr	r20
 576:	46 95       	lsr	r20
 578:	46 95       	lsr	r20
 57a:	61 e0       	ldi	r22, 0x01	; 1
 57c:	ce 01       	movw	r24, r28
 57e:	07 96       	adiw	r24, 0x07	; 7
 580:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			
			max2.MAX7219_writeData(8, 13 / 10);
 584:	41 e0       	ldi	r20, 0x01	; 1
 586:	68 e0       	ldi	r22, 0x08	; 8
 588:	ce 01       	movw	r24, r28
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			
			
			max2.MAX7219_writeData(1, data[4] / 10);
 590:	f6 01       	movw	r30, r12
 592:	40 81       	ld	r20, Z
 594:	43 9d       	mul	r20, r3
 596:	41 2d       	mov	r20, r1
 598:	11 24       	eor	r1, r1
 59a:	46 95       	lsr	r20
 59c:	46 95       	lsr	r20
 59e:	46 95       	lsr	r20
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	ce 01       	movw	r24, r28
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			
			max2.MAX7219_writeData(5, data[4] % 10);
 5aa:	f6 01       	movw	r30, r12
 5ac:	40 81       	ld	r20, Z
 5ae:	43 9d       	mul	r20, r3
 5b0:	81 2d       	mov	r24, r1
 5b2:	11 24       	eor	r1, r1
 5b4:	86 95       	lsr	r24
 5b6:	86 95       	lsr	r24
 5b8:	86 95       	lsr	r24
 5ba:	88 0f       	add	r24, r24
 5bc:	98 2f       	mov	r25, r24
 5be:	99 0f       	add	r25, r25
 5c0:	99 0f       	add	r25, r25
 5c2:	89 0f       	add	r24, r25
 5c4:	48 1b       	sub	r20, r24
 5c6:	65 e0       	ldi	r22, 0x05	; 5
 5c8:	ce 01       	movw	r24, r28
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			
			max2.MAX7219_writeData(4, data[5] / 10);
 5d0:	f7 01       	movw	r30, r14
 5d2:	40 81       	ld	r20, Z
 5d4:	43 9d       	mul	r20, r3
 5d6:	41 2d       	mov	r20, r1
 5d8:	11 24       	eor	r1, r1
 5da:	46 95       	lsr	r20
 5dc:	46 95       	lsr	r20
 5de:	46 95       	lsr	r20
 5e0:	64 e0       	ldi	r22, 0x04	; 4
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			max2.MAX7219_writeData(6, data[5] % 10);
 5ea:	f7 01       	movw	r30, r14
 5ec:	40 81       	ld	r20, Z
 5ee:	43 9d       	mul	r20, r3
 5f0:	81 2d       	mov	r24, r1
 5f2:	11 24       	eor	r1, r1
 5f4:	86 95       	lsr	r24
 5f6:	86 95       	lsr	r24
 5f8:	86 95       	lsr	r24
 5fa:	88 0f       	add	r24, r24
 5fc:	98 2f       	mov	r25, r24
 5fe:	99 0f       	add	r25, r25
 600:	99 0f       	add	r25, r25
 602:	89 0f       	add	r24, r25
 604:	48 1b       	sub	r20, r24
 606:	66 e0       	ldi	r22, 0x06	; 6
 608:	ce 01       	movw	r24, r28
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			max2.MAX7219_writeData(8, data[6] / 10);
 610:	f8 01       	movw	r30, r16
 612:	40 81       	ld	r20, Z
 614:	43 9d       	mul	r20, r3
 616:	41 2d       	mov	r20, r1
 618:	11 24       	eor	r1, r1
 61a:	46 95       	lsr	r20
 61c:	46 95       	lsr	r20
 61e:	46 95       	lsr	r20
 620:	68 e0       	ldi	r22, 0x08	; 8
 622:	ce 01       	movw	r24, r28
 624:	01 96       	adiw	r24, 0x01	; 1
 626:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			max2.MAX7219_writeData(2, data[6] % 10);
 62a:	f8 01       	movw	r30, r16
 62c:	40 81       	ld	r20, Z
 62e:	43 9d       	mul	r20, r3
 630:	81 2d       	mov	r24, r1
 632:	11 24       	eor	r1, r1
 634:	86 95       	lsr	r24
 636:	86 95       	lsr	r24
 638:	86 95       	lsr	r24
 63a:	88 0f       	add	r24, r24
 63c:	98 2f       	mov	r25, r24
 63e:	99 0f       	add	r25, r25
 640:	99 0f       	add	r25, r25
 642:	89 0f       	add	r24, r25
 644:	48 1b       	sub	r20, r24
 646:	62 e0       	ldi	r22, 0x02	; 2
 648:	ce 01       	movw	r24, r28
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	0e 94 75 00 	call	0xea	; 0xea <_ZN7max721917MAX7219_writeDataEcc>
			display = false;
 650:	10 92 0b 01 	sts	0x010B, r1
 654:	0b cf       	rjmp	.-490    	; 0x46c <main+0x2bc>
				previous_receivedByte = receivedByte;
				receivedByte= 0;
			}			
			received = false;
			
		} else if(startSaving && received) {
 656:	80 91 0d 01 	lds	r24, 0x010D
 65a:	81 11       	cpse	r24, r1
 65c:	24 cf       	rjmp	.-440    	; 0x4a6 <main+0x2f6>
 65e:	fe ce       	rjmp	.-516    	; 0x45c <main+0x2ac>
			
			//_delay_ms(2000);					
		}	
					
		if(receivedByte == 255 && received) {
			if(previous_receivedByte == 255) {
 660:	80 91 10 01 	lds	r24, 0x0110
 664:	8f 3f       	cpi	r24, 0xFF	; 255
 666:	09 f0       	breq	.+2      	; 0x66a <main+0x4ba>
 668:	15 cf       	rjmp	.-470    	; 0x494 <main+0x2e4>
 66a:	0a cf       	rjmp	.-492    	; 0x480 <main+0x2d0>
				receivedByte= 0;
			}			
			received = false;
			
		} else if(startSaving && received) {
			data[i] = receivedByte;
 66c:	80 91 0e 01 	lds	r24, 0x010E
 670:	90 91 0f 01 	lds	r25, 0x010F
 674:	20 91 11 01 	lds	r18, 0x0111
 678:	fc 01       	movw	r30, r24
 67a:	e0 50       	subi	r30, 0x00	; 0
 67c:	ff 4f       	sbci	r31, 0xFF	; 255
 67e:	20 83       	st	Z, r18
			received = false;
 680:	10 92 0c 01 	sts	0x010C, r1
			i++;
 684:	01 96       	adiw	r24, 0x01	; 1
			
			if(i >= 9) {
 686:	89 30       	cpi	r24, 0x09	; 9
 688:	91 05       	cpc	r25, r1
 68a:	0c f0       	brlt	.+2      	; 0x68e <main+0x4de>
 68c:	11 cf       	rjmp	.-478    	; 0x4b0 <main+0x300>
			received = false;
			
		} else if(startSaving && received) {
			data[i] = receivedByte;
			received = false;
			i++;
 68e:	90 93 0f 01 	sts	0x010F, r25
 692:	80 93 0e 01 	sts	0x010E, r24
 696:	e2 ce       	rjmp	.-572    	; 0x45c <main+0x2ac>

00000698 <__vector_18>:
		} 
	}
}

			
ISR(USART_RX_vect) {
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	8f 93       	push	r24
	receivedByte = UDR0;
 6a4:	80 91 c6 00 	lds	r24, 0x00C6
 6a8:	80 93 11 01 	sts	0x0111, r24
	received = true;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	80 93 0c 01 	sts	0x010C, r24
	//display = true;
}
 6b2:	8f 91       	pop	r24
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <_exit>:
 6be:	f8 94       	cli

000006c0 <__stop_program>:
 6c0:	ff cf       	rjmp	.-2      	; 0x6c0 <__stop_program>
